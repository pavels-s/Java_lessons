Найдите в интернете информацию про класс java.util.Optional.

@CodeReview(approved = true)

Для чего применяются объекты этого класса?
-для работы со ссылками, значение которых может быть null.


Какие два состояния могут быть у объектов этого класса?
-Может иметь значение, а может быть null


Как создаются экземпляры данного класса?
-Объект типа Optional может быть создан тремя методами:
 Optional.of — для создания Optional из не-null значения. При передаче в качестве аргумента null будет выкинуто исключение NullPointerException.
 Optional.ofNullable — для создания Optional из значения, которое может быть null. Если значение не null, то будет создан Optional со значением, иначе — пустой Optional.
 Optional.empty — для создания пустого Optional.


Как можно проверить в каком состоянии находится экземпляр данного класса?
String streetName = person.flatMap(Person::getAddress)
                .flatMap(PersonAddress::getStreet)
                .map(PersonAddressStreet::getStreetName)
                .orElse("EMPTY");


Как можно получить объект, который находится внутри Optional?
get()
Метод get — простейший способ получения значения объекта Optional. Если Optional непустой, то он вернёт значение, иначе выбросит исключение NoSuchElementException.
Поэтому при обращении к этому методу нужно либо проверять наличие значения при помощи Optional.isPresent(), либо использовать try/catch.
orElse()
Метод orElse возвращает значение объекта Optional или значение, переданное ему в качестве аргумента, которое может быть null.
orElseGet()
Метод orElseGet, в отличии от orElse принимает в качестве аргумента объект класса java.util.function.Supplier, который вернёт «запасное» значение, если объект Optional
пустой. Таким образом, в отличии от метода orElse, метод orElseGet создаёт «запасное» значение только по необходимости, что немного правильнее с точки зрения использования
ресурсов, особенно, когда получение значения умолчанию требует выполнения каких-либо блокирующих операций, например, обращения к базе данных.
orElseThrow()
Метод orElseThrow возвращает значение объекта Optional или выбрасывает исключение, возвращаемое объектом типа java.util.function.Supplier переданным ему в качестве аргумента.
В JDK 10 был добавлен orElseThrow без аргументов, выбрасывающий NoSuchElementException.